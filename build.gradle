import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath "io.freefair.gradle:lombok-plugin:6.0.0-m2"
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "io.freefair.lombok"

group 'io.gitlab.hohserg.elegant.networking'
version '3.10'
archivesBaseName = 'annotation-processor'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:21.0'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'com.squareup:javapoet:1.13.0'
    implementation project(':ElegantNetworkingCommon')

    if (JavaVersion.current() <= JavaVersion.VERSION_1_8) {
        testImplementation files(Jvm.current().getToolsJar())
    }
    testImplementation 'commons-io:commons-io:2.8.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation 'com.google.testing.compile:compile-testing:0.19'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testImplementation "net.jqwik:jqwik:1.4.0"


    testImplementation "io.netty:netty-all:4.1.25.Final"
    testImplementation "org.apache.commons:commons-lang3:3.5"
    testImplementation 'org.projectlombok:lombok:1.18.20'
}

configurations {
    emptyness
}

test {
    jvmArgs "--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED" //for java 16
    useJUnitPlatform()
}
test.onlyIf { false } //turn off until migration to other compilation framework

shadowJar {
    relocate 'com.google', 'shadow.com.google'
    relocate 'com.squareup', 'shadow.com.squareup'
    relocate 'org.apache', 'shadow.org.apache'

    minimize()

    classifier = null
}

java {
    withJavadocJar()
    withSourcesJar()
}


publishing {
    repositories {
        maven {
            def localRepo = new File(project.getProjectDir(), 'repo')
            localRepo.deleteDir()

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            def localRepoUrl = localRepo.getAbsolutePath()

            def usedLocation = releasesRepoUrl
            url = usedLocation

            if (usedLocation != localRepoUrl && project.hasProperty("ossrhUsername")) {
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) { publication ->
            project.shadow.component(publication)

            artifactId 'annotation-processor'

            pom {
                name = 'annotation-processor'
                description = 'This is a annotation processor for ElegantNetworking. Intended for code-generation of packet serializers'
                url = 'https://github.com/ElegantNetworking/ElegantNetworkingRoot'

                scm {
                    connection = 'scm:git:https://github.com/ElegantNetworking/ElegantNetworkingAnnotationProcessor.git'
                    developerConnection = 'scm:git:git@github.com:https://github.com/ElegantNetworking/ElegantNetworkingAnnotationProcessor.git'
                    url = 'https://github.com/ElegantNetworking/ElegantNetworkingAnnotationProcessor'
                }

                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://raw.githubusercontent.com/ElegantNetworking/ElegantNetworkingAnnotationProcessor/master/LICENSE.md'
                    }
                }

                developers {
                    developer {
                        id = 'hohserg'
                        name = 'hohserg'
                        email = 'hohserg1@yandex.ru'
                    }
                }
            }

        }
    }
}

signing {
    required { project.hasProperty("signing.keyId") }
    sign publishing.publications.mavenJava
}